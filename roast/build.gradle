import ai.arcblroth.boss.gradle.CargoWrapperPlugin
import ai.arcblroth.boss.gradle.BuildShadersTask

plugins {
    id 'de.undercouch.download'
}
apply plugin: CargoWrapperPlugin

// Set buildDir to the target folder
// to be consistent with Rust projects
buildDir = new File(projectDir, 'target')

cargo {
    outputs = [Tuple.tuple('', 'roast.dll')]
}

def buildShaders = tasks.register('buildShaders', BuildShadersTask) {
    shaders = [
            "shader/scene.vert.glsl": "scene_vert",
            "shader/scene.frag.glsl": "scene_frag",
    ]
    outputDir = new File(buildDir, 'shader')
}

def downloadCascadiaFont = tasks.register('downloadCascadiaFont', Download) {
    src cascadia_release
    dest new File(buildDir, 'fonts/cascadia.zip')
    onlyIfModified true
}

def unzipCascadiaFont = tasks.register('unzipFonts', Copy) {
    dependsOn(downloadCascadiaFont)

    from(zipTree(downloadCascadiaFont.get().dest))
    into new File(buildDir, 'fonts/cascadia')
    include 'ttf/static/CascadiaMono-Regular.ttf'
}

def cbindgen = tasks.register('cbindgen') {
    def config = project.file('cbindgen.toml')
    def output = new File(buildDir, 'roast.h')

    inputs.file(config)
    outputs.file(output)

    doLast {
        project.exec {
            commandLine(project.rootProject.getExecutableFromProperties('cbindgen'))
            args(
                    '--config', config.getAbsolutePath(),
                    '--crate', 'roast',
                    '--output', output.getAbsolutePath(),
            )
        }.assertNormalExitValue()
    }
}

project.afterEvaluate {
    def build = tasks.getByName('build')
    build.dependsOn(buildShaders)
    build.dependsOn(unzipCascadiaFont)

    cbindgen.get().inputs.dir(new File(build.workingDir, "src"))
    cbindgen.get().dependsOn(build)
}
